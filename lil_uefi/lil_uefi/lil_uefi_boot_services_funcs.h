// SPEC: Section 4.4 (gives order of the table)
// SPEC: Section 7.1, 7.2, 7.3, 7.4, 7.5 (gives signatures of the functions)
X(RaiseTPL,                    EFI_TPL,    (EFI_TPL new_tpl))
X(RestoreTPL,                  void,       (EFI_TPL old_tpl))
X(AllocatePages,               EFI_STATUS, (EFI_ALLOCATE_TYPE type, EFI_MEMORY_TYPE memory_type, EFI_UINTN pages, EFI_PHYSICAL_ADDRESS *memory))
X(FreePages,                   EFI_STATUS, (EFI_PHYSICAL_ADDRESS memory, EFI_UINTN pages))
X(GetMemoryMap,                EFI_STATUS, (EFI_UINTN *size_inout, EFI_MEMORY_DESCRIPTOR *descriptors_inout, EFI_UINTN *map_key_out, EFI_UINTN *descriptor_size_out, EFI_UINT32 *descriptor_version_out))
X(AllocatePool,                EFI_STATUS, (EFI_MEMORY_TYPE pool_type, EFI_UINTN size, void **buffer))
X(FreePool,                    EFI_STATUS, (void *buffer))
X(CreateEvent,                 EFI_STATUS, (EFI_UINT32 type, EFI_TPL notify_tpl, EFI_EVENT_NOTIFY_FUNCITON *notify_function, void* notify_context, EFI_EVENT *event_out))
X(SetTimer,                    EFI_STATUS, (EFI_EVENT event, EFI_TIMER_DELAY delay_type, EFI_UINT64 trigger_time))
X(WaitForEvent,                EFI_STATUS, (EFI_UINTN number_of_events, EFI_EVENT *event, EFI_UINTN *index))
X(SignalEvent,                 EFI_STATUS, (EFI_EVENT event))
X(CloseEvent,                  EFI_STATUS, (EFI_EVENT event))
X(CheckEvent,                  EFI_STATUS, (EFI_EVENT event))
X(InstallProtocolInterface,    EFI_STATUS, (EFI_HANDLE *handle, EFI_GUID *protocol, EFI_INTERFACE_TYPE interface_type, void* interface))
X(ReinstallProtocolInterface,  EFI_STATUS, (EFI_HANDLE *handle, EFI_GUID *protocol, void* old_interface, void* new_interface))
X(UninstallProtocolInterface,  EFI_STATUS, (EFI_HANDLE handle, EFI_GUID *protocol, void* interface))
X(HandleProtocol,              EFI_STATUS, (EFI_HANDLE handle, EFI_GUID *protocol, void **interface))
X(Reserved,                    void,       (void))
X(RegisterProtocolNotify,      EFI_STATUS, (EFI_GUID *protocol, EFI_EVENT event, void **registration))
X(LocateHandle,                EFI_STATUS, (EFI_LOCATE_SEARCH_TYPE search_type, EFI_GUID *protocol, void *search_key, EFI_UINTN *buffer_size, EFI_HANDLE *buffer))
X(LocateDevicePath,            EFI_STATUS, (EFI_GUID *protocol, struct EFI_DEVICE_PATH_PROTOCOL **device_path, EFI_HANDLE *device))
X(InstallConfigurationTable,   EFI_HANDLE, (EFI_GUID *guid, void *table))
X(LoadImage,                   EFI_STATUS, (EFI_BOOLEAN boot_policy, EFI_HANDLE parent_image_handle, struct EFI_DEVICE_PATH_PROTOCOL *device_path, void *source_buffer, EFI_UINTN source_size, EFI_HANDLE *image_handle_out))
X(StartImage,                  EFI_STATUS, (EFI_HANDLE image_handle, EFI_UINTN *exit_data_size, EFI_UINT16 **exit_data))
X(Exit,                        EFI_STATUS, (EFI_HANDLE image_handle, EFI_STATUS exit_status, EFI_UINTN exit_data_size, EFI_UINT16 *exit_data))
X(UnloadImage,                 EFI_STATUS, (EFI_HANDLE image_handle))
X(ExitBootServices,            EFI_STATUS, (EFI_HANDLE image_handle, EFI_UINTN map_key))
X(GetNextMonotonicCount,       EFI_STATUS, (EFI_UINT64 *count_out))
X(Stall,                       EFI_STATUS, (EFI_UINTN microseconds))
X(SetWatchdogTimer,            EFI_STATUS, (EFI_UINTN timeout, EFI_UINT64 watchdog_code, EFI_UINTN data_size, EFI_UINT16 *watchdog_data))
X(ConnectController,           EFI_STATUS, (EFI_HANDLE controller_handle, EFI_HANDLE *driver_image_handle, struct EFI_DEVICE_PATH_PROTOCOL *remaining_device_path, EFI_BOOLEAN recursive))
X(DisconnectController,        EFI_STATUS, (EFI_HANDLE controller_handle, EFI_HANDLE driver_image_handle, EFI_HANDLE child_handle))
X(OpenProtocol,                EFI_STATUS, (EFI_HANDLE handle, EFI_GUID *protocol, void **interface, EFI_HANDLE agent_handle, EFI_HANDLE controller_handle, EFI_UINT32 attributes))
X(CloseProtocol,               EFI_STATUS, (EFI_HANDLE handle, EFI_GUID *protocol, EFI_HANDLE agent_handle, EFI_HANDLE controller_handle))
X(OpenProtocolInformation,     EFI_STATUS, (EFI_HANDLE handle, EFI_GUID *protocol, EFI_OPEN_PROTOCOL_INFORMATION_ENTRY **entry_buffer, EFI_UINTN *entry_count))
X(ProtocolsPerHandle,          EFI_STATUS, (EFI_HANDLE handle, EFI_GUID ***protocol_buffer, EFI_UINTN *protocol_buffer_count))
X(LocateHandleBuffer,          EFI_STATUS, (EFI_LOCATE_SEARCH_TYPE search_type, EFI_GUID *protocol, void *search_key, EFI_UINTN *handle_count, EFI_HANDLE **buffer))
X(LocateProtocol,              EFI_STATUS, (EFI_GUID *protocol, void *registration, void **interface))
X(InstallMultipleProtocolInterfaces,   EFI_STATUS, (EFI_HANDLE *handle, ...))
X(UninstallMultipleProtocolInterfaces, EFI_STATUS, (EFI_HANDLE handle, ...))
X(CalculateCrc32,              EFI_STATUS, (void *data, EFI_UINTN data_size, EFI_UINT32 *crc32_out))
X(CopyMem,                     void,       (void *destination, void *source, EFI_UINTN length))
X(SetMem,                      void,       (void *buffer, EFI_UINTN size, EFI_UINT8 value))
X(CreateEventEx,               EFI_STATUS, (EFI_UINT32 type, EFI_TPL notify_tpl, EFI_EVENT_NOTIFY_FUNCITON *notify_function, void *notify_context, EFI_GUID *event_group, EFI_EVENT *event_out))
