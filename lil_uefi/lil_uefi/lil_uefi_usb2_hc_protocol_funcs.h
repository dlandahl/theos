// SPEC: Section 17.1.1
X(GetCapability,            EFI_STATUS, (struct EFI_USB2_HC_PROTOCOL *prot, EFI_UINT8 *max_speed, EFI_UINT8 *port_number, EFI_UINT8 *is_64bit_capable))
X(Reset,                    EFI_STATUS, (struct EFI_USB2_HC_PROTOCOL *prot, EFI_UINT16 attributes))
X(GetState,                 EFI_STATUS, (struct EFI_USB2_HC_PROTOCOL *prot, EFI_USB_HC_STATE *out_state))
X(SetState,                 EFI_STATUS, (struct EFI_USB2_HC_PROTOCOL *prot, EFI_USB_HC_STATE state))
X(ControlTransfer,          EFI_STATUS, (struct EFI_USB2_HC_PROTOCOL *prot, EFI_UINT8 device_address, EFI_UINT8 device_speed, EFI_UINTN max_packet_length, EFI_USB_DEVICE_REQUEST *request, EFI_USB_DATA_DIRECTION transfer_direction, void *data, EFI_UINTN *data_length, EFI_UINTN timeout, EFI_USB2_HC_TRANSACTION_TRANSLATOR *translator, EFI_UINT32 *transfer_result))
X(BulkTransfer,             EFI_STATUS, (struct EFI_USB2_HC_PROTOCOL *prot, EFI_UINT8 device_address, EFI_UINT8 endpoint_address, EFI_UINT8 device_speed, EFI_UINTN max_packet_length, EFI_UINT8 data_buffers_number, void *data[EFI_USB_MAX_BULK_BUFFER_NUM], EFI_UINTN *data_length, EFI_UINT8 *data_toggle, EFI_UINTN timeout, EFI_USB2_HC_TRANSACTION_TRANSLATOR *translator, EFI_UINT32 *transfer_result))
X(AsyncInterruptTransfer,   EFI_STATUS, (struct EFI_USB2_HC_PROTOCOL *prot, EFI_UINT8 device_address, EFI_UINT8 endpoint_address, EFI_UINT8 device_speed, EFI_UINTN max_packet_length, EFI_BOOLEAN is_new_transfer, EFI_UINT8 *data_toggle, EFI_UINTN polling_interval, EFI_UINTN data_length, EFI_USB2_HC_TRANSACTION_TRANSLATOR *translator, EFI_ASYNC_USB_TRANSFER_CALLBACK *callback, void *context))
X(SyncInterruptTransfer,    EFI_STATUS, (struct EFI_USB2_HC_PROTOCOL *prot, EFI_UINT8 device_address, EFI_UINT8 endpoint_address, EFI_UINT8 device_speed, EFI_UINTN max_packet_length, void *data, EFI_UINTN *data_length, EFI_UINT8 *data_toggle, EFI_UINTN timeout, EFI_USB2_HC_TRANSACTION_TRANSLATOR *translator, EFI_UINT32 *transfer_result))
X(IsochronousTransfer,      EFI_STATUS, (struct EFI_USB2_HC_PROTOCOL *prot, EFI_UINT8 device_address, EFI_UINT8 endpoint_address, EFI_UINT8 device_speed, EFI_UINTN max_packet_length, EFI_UINT8 data_buffers_number, void *data[EFI_USB_MAX_ISO_BUFFER_NUM], EFI_UINTN data_length, EFI_USB2_HC_TRANSACTION_TRANSLATOR *translator, EFI_UINT32 *transfer_result))
X(AsyncIsochronousTransfer, EFI_STATUS, (struct EFI_USB2_HC_PROTOCOL *prot, EFI_UINT8 device_address, EFI_UINT8 endpoint_address, EFI_UINT8 device_speed, EFI_UINTN max_packet_length, EFI_UINT8 data_buffers_number, void *data[EFI_USB_MAX_ISO_BUFFER_NUM], EFI_UINTN data_length, EFI_USB2_HC_TRANSACTION_TRANSLATOR *translator, EFI_ASYNC_USB_TRANSFER_CALLBACK isochronous_callback, void *context))
X(GetRootHubPortStatus,     EFI_STATUS, (struct EFI_USB2_HC_PROTOCOL *prot, EFI_UINT8 port_number, EFI_USB_PORT_STATUS *port_status))
X(SetRootHubPortFeature,    EFI_STATUS, (struct EFI_USB2_HC_PROTOCOL *prot, EFI_UINT8 port_number, EFI_USB_PORT_FEATURE port_feature))
X(ClearRootHubPortFeature,  EFI_STATUS, (struct EFI_USB2_HC_PROTOCOL *prot, EFI_UINT8 port_number, EFI_USB_PORT_FEATURE port_feature))
